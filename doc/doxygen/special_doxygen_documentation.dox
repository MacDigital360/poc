
/**
 * @mainpage POC - Portable Preprocessor Compile-time Target Platform Configuration Lib
 *
 * POC is free software. You may copy, distribute, and modify it under the terms of the License contained in the file @c LICENSE.txt distributed with this package. This license is the same as the BSD License.
 * 
 * @section overview Overview and introduction
 *
 * POC (Portable Preprocessor Compile-time Target Platform Configurator) is a collection of C preprocessor symbols to manually select or automatically detect certain properties of the target platform compiling for, e.g. the compiler used, the target operating system, or target data model, etc. 
 * 
 * 
 * Use the preprocessor symbols prefixed with @c POC_ to detect the target platform the code is compiled for and to allow cross platform compatible keywords, for example to align data types on the stack.
 * 
 * Use POC to detect the target platform the code unit is compiled for, for example:
 * - @c POC_ARCH stores an id identifying the machine architecture
 * - @c POC_COMPILER stores an id identifying the used compiler, @c POC_COMPILER_VERSION stores a number representing the compiler version
 * - @c POC_DATA_MODEL stores an id identifying the platforms data model alas the bit-count of integral, floating point, and pointer types.
 * - @c POC_ENDIAN stores an id identifying the endianess of the platform.
 * - @c POC_LANG stores an id identifying the language (C, C++, Objective-C, OpenCL, CUDA, etc.) compiling for.
 * - @c POC_OS stores an id identifying the target operating system.
 * 
 * Each of these preprocessor symbols (other than the ones ending with @c _VERSION) is accompanied by a macro with a @c _STRING postfix that stores a character string describing the macro's value.
 * 
 * In addition, each compiler, architecture, language, etc. also defines a specific macro when detected, e.g. @c POC_ARCH_X86_32 is defined if compiling for a 32bit x86 machine architecture. @c POC_ARCH and @c POC_ARCH_X86_32 are both set to an (always) predefined @c POC_ARCH_X86_32_ID macro.
 * 
 * If no known language, compiler, or endianess could be determined special @c UNKNOWN ids and strings are used as values, e.g. @c POC_OS might be set to @c POC_OS_UNKNOWN_ID and @c POC_OS_STRING is set to @c POC_OS_UNKNOWN_STRING .
 * 
 * See @c poc_diagnose_main.c for an example how to use POC's platform detection macros.
 * 
 * 
 * Aside the platform detection macros POC also defines preprocessor symbols to allow portable usage of keywords to:
 * - Align data types automatically on the stack by wrapping the type in @c POC_ALIGN_BEING(<byte-alignment>) and @c POC_ALIGN_END(<byte-alignment>) macros.
 * - @c Using POC_RESTRICT to enable C99's restrict keyword or disable it when compiling for other languages that
  don't support it.
 * 
 * @section adding_new_platforms Adding new platforms
 * 
 * When adding new platforms (operating system, compiler, architecture, C/C++ standards, etc.) then first add the following code into every detection branch 
 * 
 * @code #error Untested. Remove error preprocessor directive after having ported and tested the code to the platform. 
 * @endcode
 *  
 * Only remove the preprocessor error directive after having ported and tested the code on the platform!
 * 
 * @section error_directives Error-directives when using untested code
 *
 * The error-directive is also present if a platform couldn't be tested yet - remove it but be warned that the code isn't tested and might possibly be erroreneous.
 * 
 * 
 * @section code_and_issues Where to find the code and file issues
 *
 * The code can be found and downloaded at: http://github.com/bknafla/poc
 *
 * Please file issues with the code at: http://github.com/bknafla/poc/issues
 * 
 * 
 *
 * @section author Author
 * 
 * Bjoern Knafla (bknafla@googlemail.com)
 * 
 *
 * @section references References
 *
 * - Collection of macros defined by language standards, compilers, libraries, etc.:
 *   http://predef.sourceforge.net/index.php 
 * 
 *
 *
 * @section release_notes Release Notes
 *
 * Version 0.2.0 (May 1, 2009)
 * - Initial release
 *
 */